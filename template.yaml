AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Stop and Start EC2 instances triggered by EventBridge


Globals:
  Function:
    Runtime: java17
    Architectures:
      - x86_64
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        INSTANCE_ID: "i-0a4779856f887e215"

Parameters:
  EnableCronJobs:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: "Enable the cron job."

Conditions:
  AreCronJobsEnabled: !Equals [ !Ref EnableCronJobs, "true" ]

Resources:
  StopEC2Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mouride.dev.aws.lambda.StopInstance::handleRequest
      CodeUri: instances-management
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:StopInstances
                - ec2:DescribeInstances
              Resource: '*'

  StartEC2Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mouride.dev.aws.lambda.StartInstance::handleRequest
      CodeUri: instances-management
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ec2:StartInstances
                - ec2:DescribeInstances
              Resource: '*'

  StopEC2ScheduleRule:
    Type: AWS::Events::Rule
    Condition: AreCronJobsEnabled
    Properties:
      ScheduleExpression: cron(0 17 ? * MON-FRI *)
      Targets:
        - Arn: !GetAtt StopEC2Function.Arn
          Id: StopEC2Function
          Input: '{"detail": {"action": "stop"}}'


  StartEC2ScheduleRule:
    Type: AWS::Events::Rule
    Condition: AreCronJobsEnabled
    Properties:
      ScheduleExpression: cron(0 7 ? * MON-FRI *)
      Targets:
        - Arn: !GetAtt StartEC2Function.Arn
          Id: StartEC2Function
          Input: '{"detail": {"action": "start"}}'


  StopEC2Permission:
    Type: AWS::Lambda::Permission
    Condition: AreCronJobsEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StopEC2Function
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopEC2ScheduleRule.Arn

  StartEC2Permission:
    Type: AWS::Lambda::Permission
    Condition: AreCronJobsEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StartEC2Function
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StartEC2ScheduleRule.Arn

Outputs:
  StopEC2Function:
    Description: "StopEC2 Lambda Function ARN"
    Value: !GetAtt StopEC2Function.Arn
  StopEC2FunctionIamRole:
    Description: "Implicit IAM Role created for StopEC2 function"
    Value: !GetAtt StopEC2Function.Arn
  StartEC2Function:
    Description: "StartEC2 Lambda Function ARN"
    Value: !GetAtt StopEC2Function.Arn
  StartEC2FunctionIamRole:
    Description: "Implicit IAM Role created for StartEC2 function"
    Value: !GetAtt StartEC2Function.Arn
  StartEC2ScheduleRule:
    Description: "StartEC2 Schedule Rule"
    Value: !GetAtt StartEC2ScheduleRule.Arn
    Condition: AreCronJobsEnabled
  StopEC2ScheduleRule:
    Description: "StopEC2 Schedule Rule"
    Value: !GetAtt StopEC2ScheduleRule.Arn
    Condition: AreCronJobsEnabled
  StartEC2ScheduleRuleArn:
    Description: "StartEC2 Schedule Rule ARN"
    Value: !GetAtt StartEC2ScheduleRule.Arn
    Condition: AreCronJobsEnabled
  StopEC2ScheduleRuleArn:
    Description: "StopEC2 Schedule Rule ARN"
    Value: !GetAtt StopEC2ScheduleRule.Arn
    Condition: AreCronJobsEnabled